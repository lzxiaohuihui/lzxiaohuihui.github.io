(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{336:function(t,a,s){"use strict";s.r(a);var e=s(3),n=Object(e.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"collection集合中常见的api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collection集合中常见的api"}},[t._v("#")]),t._v(" Collection集合中常见的Api")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230224091718611.png",alt:"image-20230224091718611"}})]),t._v(" "),a("h4",{attrs:{id:"增"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增"}},[t._v("#")]),t._v(" "),a("strong",[t._v("增：")])]),t._v(" "),a("ul",[a("li",[t._v("方法传入的数据类型必须是 Object，所以当写入基本数据类型的时候，会做自动装箱 auto-boxing 和自动拆箱 unboxing。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("把另一个集合里的元素加到此集合中。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"删"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#删"}},[t._v("#")]),t._v(" "),a("strong",[t._v("删：")])]),t._v(" "),a("ul",[a("li",[t._v("删除的指定元素。")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("删除集合B中的所有元素")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#改"}},[t._v("#")]),t._v(" "),a("strong",[t._v("改：")])]),t._v(" "),a("ul",[a("li",[t._v("没有改, 可以用删和增来实现")])]),t._v(" "),a("h4",{attrs:{id:"查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查"}},[t._v("#")]),t._v(" "),a("strong",[t._v("查：")])]),t._v(" "),a("ul",[a("li",[t._v("查集合中是否有某个特定的元素")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("查集合 A 是否包含了集合 B：")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsAll")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"对集合整体的操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对集合整体的操作"}},[t._v("#")]),t._v(" "),a("strong",[t._v("对集合整体的操作：")])]),t._v(" "),a("ul",[a("li",[t._v("判断集合是否为空")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isEmpty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("集合的大小")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[t._v("集合转成数组")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[t._v("#")]),t._v(" List")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230224091737996.png",alt:"image-20230224091737996"}})]),t._v(" "),a("h4",{attrs:{id:"与linkedlist的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与linkedlist的区别"}},[t._v("#")]),t._v(" 与LinkedList的区别")]),t._v(" "),a("blockquote",[a("p",[t._v("An ordered collection (also known as a sequence).")]),t._v(" "),a("p",[t._v("Unlike sets, lists typically allow duplicate elements.")])]),t._v(" "),a("p",[t._v("List 的实现方式有LinkedList 和 ArrayList，一个链表一个数组，没什么好说的。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("功能")]),t._v(" "),a("th",[t._v("方法")]),t._v(" "),a("th",[t._v("ArrayList")]),t._v(" "),a("th",[t._v("LinkedList")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("增")]),t._v(" "),a("td",[t._v("add(E e)")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("O(1)")])]),t._v(" "),a("tr",[a("td",[t._v("增")]),t._v(" "),a("td",[t._v("add(int index, E e)")]),t._v(" "),a("td",[t._v("O(n)")]),t._v(" "),a("td",[t._v("O(n)")])]),t._v(" "),a("tr",[a("td",[t._v("删")]),t._v(" "),a("td",[t._v("remove(int index)")]),t._v(" "),a("td",[t._v("O(n)")]),t._v(" "),a("td",[t._v("O(n)")])]),t._v(" "),a("tr",[a("td",[t._v("删")]),t._v(" "),a("td",[t._v("remove(E e)")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("O(n)")])]),t._v(" "),a("tr",[a("td",[t._v("改")]),t._v(" "),a("td",[t._v("set(int index, E e)")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("O(n)")])]),t._v(" "),a("tr",[a("td",[t._v("查")]),t._v(" "),a("td",[t._v("get(int index)")]),t._v(" "),a("td",[t._v("O(1)")]),t._v(" "),a("td",[t._v("O(n)")])])])]),t._v(" "),a("h4",{attrs:{id:"与vector的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#与vector的区别"}},[t._v("#")]),t._v(" 与Vector的区别")]),t._v(" "),a("p",[t._v("Vector 中许多方法加了synchronized关键字，同步了，但效率低。")]),t._v(" "),a("blockquote",[a("p",[t._v("线程安全区别")]),t._v(" "),a("p",[t._v("扩容区别")])]),t._v(" "),a("p",[t._v("ArrayList扩容1.5倍，Vector扩容2倍。")]),t._v(" "),a("h3",{attrs:{id:"queue-deque"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue-deque"}},[t._v("#")]),t._v(" Queue & Deque")]),t._v(" "),a("ul",[a("li",[t._v("Queue是单向队列； Deque是双向队列。")])]),t._v(" "),a("h4",{attrs:{id:"queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queue"}},[t._v("#")]),t._v(" Queue")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("功能")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("抛异常")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("返回值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("增")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("add(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("offer(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("删")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("remove()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("poll()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("瞧")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("element()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("peek()")])])])]),t._v(" "),a("p",[a("strong",[t._v("为什么会抛异常呢？")])]),t._v(" "),a("ul",[a("li",[t._v("比如队列空了，那 remove() 就会抛异常，但是 poll() 就返回 null；element() 就会抛异常，而 peek() 就返回 null 就好了。")])]),t._v(" "),a("p",[a("strong",[t._v("那 add(e) 怎么会抛异常呢？")])]),t._v(" "),a("p",[t._v("有些 Queue 它会有容量的限制，比如 "),a("strong",[t._v("BlockingQueue")]),t._v("，那如果已经达到了它最大的容量且不会扩容的，就会抛异常；但如果 offer(e)，就会 return false.")]),t._v(" "),a("p",[a("strong",[t._v("那怎么选择呢？：")])]),t._v(" "),a("ul",[a("li",[t._v("首先，要用就用"),a("strong",[t._v("同一组 API")]),t._v("，前后要统一；")]),t._v(" "),a("li",[t._v("其次，根据需求。如果你需要它抛异常，那就是用抛异常的；不过做算法题时基本不用，所以选那组返回特殊值的就好了。")])]),t._v(" "),a("h4",{attrs:{id:"deque"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deque"}},[t._v("#")]),t._v(" Deque")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("功能")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("抛异常")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("返回值")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("增")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("addFirst(e)/ addLast(e)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("offerFirst(e)/ offerLast(e)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("删")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("removeFirst()/ removeLast()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("pollFirst()/ pollLast()")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("瞧")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("getFirst()/ getLast()")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("peekFirst()/ peekLast()")])])])]),t._v(" "),a("p",[t._v("使用时同理，要用就用同一组。")]),t._v(" "),a("p",[t._v("Queue 和 Deque 的这些 API 都是 O(1) 的时间复杂度，准确来说是均摊时间复杂度。")]),t._v(" "),a("h4",{attrs:{id:"实现类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现类"}},[t._v("#")]),t._v(" 实现类")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230224095558967.png",alt:"image-20230224095558967"}})]),t._v(" "),a("ul",[a("li",[t._v("如果想实现「普通队列 - 先进先出」的语义，就使用 "),a("strong",[t._v("LinkedList")]),t._v(" 或者 "),a("strong",[t._v("ArrayDeque")]),t._v(" 来实现；")]),t._v(" "),a("li",[t._v("如果想实现「优先队列」的语义，就使用 "),a("strong",[t._v("PriorityQueue")]),t._v("；")]),t._v(" "),a("li",[t._v("如果想实现「栈」的语义，就使用 "),a("strong",[t._v("ArrayDeque")]),t._v("。")])]),t._v(" "),a("p",[t._v("在实现普通队列时，如何选择用"),a("strong",[t._v("LinkedList")]),t._v("还是"),a("strong",[t._v("ArrayDeque")]),t._v("呢？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230224095844288.png",alt:"image-20230224095844288"}})]),t._v(" "),a("p",[a("strong",[t._v("LinkedList")]),t._v("还是"),a("strong",[t._v("ArrayDeque")]),t._v("区别")]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("strong",[t._v("ArrayDeque")]),t._v(" 是一个可扩容的数组，"),a("strong",[t._v("LinkedList")]),t._v(" 是链表结构；")]),t._v(" "),a("li",[a("strong",[t._v("ArrayDeque")]),t._v(" 里不可以存 null 值，但是 "),a("strong",[t._v("LinkedList")]),t._v(" 可以；")]),t._v(" "),a("li",[a("strong",[t._v("ArrayDeque")]),t._v(" 在操作头尾端的增删操作时更高效，但是 "),a("strong",[t._v("LinkedList")]),t._v(" 只有在当要移除中间某个元素且已经找到了这个元素后的移除才是 O(1) 的；")]),t._v(" "),a("li",[a("strong",[t._v("ArrayDeque")]),t._v(" 在内存使用方面更高效。")])])]),t._v(" "),a("p",[t._v("非必要存null值时，推荐使用ArrayDeque。")]),t._v(" "),a("h4",{attrs:{id:"stack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stack"}},[t._v("#")]),t._v(" Stack")]),t._v(" "),a("p",[t._v("虽然Java有这个Stack类，官方文档说不让用了！因为Vector已经弃用，而Stack是继承它的。")]),t._v(" "),a("p",[t._v("用ArrayDeque吧")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Deque")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" stack "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayDeque")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[t._v("#")]),t._v(" Set")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230224100501762.png",alt:"image-20230224100501762"}})]),t._v(" "),a("p",[t._v("Set 的常用实现类有三个：")]),t._v(" "),a("p",[a("strong",[t._v("HashSet")]),t._v(": 采用 Hashmap 的 key 来储存元素，主要特点是无序的，基本操作都是 O(1) 的时间复杂度，很快。")]),t._v(" "),a("p",[a("strong",[t._v("LinkedHashSet")]),t._v(": 这个是一个 HashSet + LinkedList 的结构，特点就是既拥有了 O(1) 的时间复杂度，又能够保留插入的顺序。")]),t._v(" "),a("p",[a("strong",[t._v("TreeSet")]),t._v(": 采用红黑树结构，特点是可以有序，可以用自然排序或者自定义比较器来排序；缺点就是查询速度没有 HashSet 快。")]),t._v(" "),a("p",[t._v("那每个 Set 的"),a("strong",[t._v("底层实现")]),t._v("其实就是对应的 Map：")]),t._v(" "),a("p",[a("strong",[t._v("数值放在 map 中的 key 上，value 上放了个 PRESENT，是一个静态的 Object，相当于 place holder，每个 key 都指向这个 object。")])]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230224100732591.png",alt:"image-20230224100732591"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);