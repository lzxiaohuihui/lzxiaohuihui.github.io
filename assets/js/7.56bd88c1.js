(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{337:function(s,a,t){"use strict";t.r(a);var n=t(3),e=Object(n.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h3",{attrs:{id:"底层数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#底层数据结构"}},[s._v("#")]),s._v(" 底层数据结构")]),s._v(" "),a("ul",[a("li",[s._v("由数组和链表组合构成的数据结构")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230224104541970.png",alt:"image-20230224104541970"}})]),s._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Entry")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" hash"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),s._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),s._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Node")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("K")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("V")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("h3",{attrs:{id:"插入节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入节点"}},[s._v("#")]),s._v(" 插入节点")]),s._v(" "),a("p",[s._v("java8 之前是头插法； java8之后是尾插法。")]),s._v(" "),a("h4",{attrs:{id:"扩容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#扩容"}},[s._v("#")]),s._v(" 扩容")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("Capacity")]),s._v("：HashMap当前长度。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("LoadFactor")]),s._v("：负载因子，默认值0.75f。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("扩容")]),s._v("：创建一个新的Entry空数组，长度是原数组的2倍。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("ReHash")]),s._v("：遍历原Entry数组，把所有的Entry重新Hash到新数组。")])])]),s._v(" "),a("p",[s._v("扩容后每个key Hash到的index"),a("strong",[s._v("不一致")]),s._v("，所以需要重新Hash。")]),s._v(" "),a("h4",{attrs:{id:"头插法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#头插法"}},[s._v("#")]),s._v(" 头插法")]),s._v(" "),a("p",[s._v("在多线程中会导致循环链表。")]),s._v(" "),a("p",[s._v("插入一个元素需要进行扩容时，当一个线程完成扩容，另一个线程将节点添加到新数组时就会产生指向问题，导致循环指向。")]),s._v(" "),a("h3",{attrs:{id:"重写equal-方法但不重写-hashcode方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重写equal-方法但不重写-hashcode方法"}},[s._v("#")]),s._v(" 重写equal 方法但不重写 hashcode方法")]),s._v(" "),a("p",[s._v("保证两个前提")]),s._v(" "),a("blockquote",[a("ol",[a("li",[s._v("如果两个对象相同（即用equals比较返回true），那么它们的hashCode值一定要相同；")]),s._v(" "),a("li",[s._v("如果两个对象的hashCode相同，它们并不一定相同(即用equals比较返回false) 。")])])]),s._v(" "),a("p",[s._v("如果重写了equal方法，使得两个对象相同，但是hashcode不同，这时将他们插入到不重复集合Map或者Set中，就会插入成功，与预期不符。")])])}),[],!1,null,null,null);a.default=e.exports}}]);