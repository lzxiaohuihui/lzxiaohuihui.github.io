(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{346:function(a,t,v){"use strict";v.r(t);var _=v(3),s=Object(_.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"本地事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#本地事务"}},[a._v("#")]),a._v(" 本地事务")]),a._v(" "),t("p",[a._v("满足数据库中的ACID")]),a._v(" "),t("ul",[t("li",[a._v("原子性：事务中的所有操作，要么全部成功，要么全部失败")]),a._v(" "),t("li",[a._v("一致性：要保证数据库内部完整性，满足约束")]),a._v(" "),t("li",[a._v("隔离性：对同一资源操作的事务不能同时发生")]),a._v(" "),t("li",[a._v("持久性：对数据库做的一切修改将永久保存")])]),a._v(" "),t("h2",{attrs:{id:"分布式事务"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分布式事务"}},[a._v("#")]),a._v(" 分布式事务")]),a._v(" "),t("p",[a._v("不是在单个服务或单个数据库架构下，产生的事务")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230301102354681.png",alt:"image-20230301102354681"}})]),a._v(" "),t("h3",{attrs:{id:"cap定理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cap定理"}},[a._v("#")]),a._v(" CAP定理")]),a._v(" "),t("blockquote",[t("ul",[t("li",[t("p",[a._v("Consistency（一致性）：用户访问分布式系统中的任意节点，得到的数据必须一致。")])]),a._v(" "),t("li",[t("p",[a._v("Availability（可用性）：用户访问集群中任意健康节点，必须得到响应。")])]),a._v(" "),t("li",[t("p",[a._v("Partition tolerance （分区容错性）：因为网络故障，分布式系统内部形成多个分区，也要对外提供服务。")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230301102548612.png",alt:"image-20230301102548612"}})]),a._v(" "),t("p",[t("strong",[a._v("矛盾")])]),a._v(" "),t("p",[a._v("如果保证一致性，和可用性，那么当分布式系统中因为网络原因，有的节点无法通信，那么就会导致节点之间数据不同步，如果让"),t("strong",[a._v("数据不同步的节点")]),a._v("不能访问，那么就不满足"),t("strong",[a._v("可用性")]),a._v("，如果让他能访问，那么就不满足"),t("strong",[a._v("一致性")]),a._v("。")]),a._v(" "),t("h3",{attrs:{id:"base理论"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#base理论"}},[a._v("#")]),a._v(" BASE理论")]),a._v(" "),t("blockquote",[t("ul",[t("li",[t("strong",[a._v("Basically Available")]),a._v(" "),t("strong",[a._v("（基本可用）")]),a._v("：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。")]),a._v(" "),t("li",[a._v("**Soft State（软状态）：**在一定时间内，允许出现中间状态，比如临时的不一致状态。")]),a._v(" "),t("li",[t("strong",[a._v("Eventually Consistent（最终一致性）")]),a._v("：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。")])])]),a._v(" "),t("p",[a._v("AP模式：各子事务分别执行和提交，允许出现结果不一致，然后采取弥补措施恢复数据即可，实现最终一致性。")]),a._v(" "),t("p",[a._v("CP模式：各个子事务执行后互相等待，同时提交，同时回滚，达成强一致性。")]),a._v(" "),t("h2",{attrs:{id:"seata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#seata"}},[a._v("#")]),a._v(" Seata")]),a._v(" "),t("p",[a._v("Seata事务管理中有三个重要的角色：")]),a._v(" "),t("blockquote",[t("ul",[t("li",[t("p",[t("strong",[a._v("TC (Transaction Coordinator) -")]),a._v(" **事务协调者：**维护全局和分支事务的状态，协调全局事务提交或回滚。")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("TM (Transaction Manager) -")]),a._v(" **事务管理器：**定义全局事务的范围、开始全局事务、提交或回滚全局事务。")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("RM (Resource Manager) -")]),a._v(" **资源管理器：**管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230301105138017.png",alt:"image-20230301105138017"}})]),a._v(" "),t("p",[a._v("Seata基于上述架构提供了四种不同的分布式事务解决方案：")]),a._v(" "),t("blockquote",[t("ul",[t("li",[a._v("XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入")]),a._v(" "),t("li",[a._v("TCC模式：最终一致的分阶段事务模式，有业务侵入")]),a._v(" "),t("li",[a._v("AT模式：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式")]),a._v(" "),t("li",[a._v("SAGA模式：长事务模式，有业务侵入")])])]),a._v(" "),t("h3",{attrs:{id:"xa模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#xa模式"}},[a._v("#")]),a._v(" XA模式")]),a._v(" "),t("p",[t("strong",[a._v("两阶段提交")])]),a._v(" "),t("p",[a._v("一阶段：")]),a._v(" "),t("ul",[t("li",[a._v("事务协调者通知每个事物参与者执行本地事务")]),a._v(" "),t("li",[a._v("本地事务执行完成后报告事务执行状态给事务协调者，此时事务不提交，继续持有数据库锁")])]),a._v(" "),t("p",[a._v("二阶段：")]),a._v(" "),t("ul",[t("li",[a._v("事务协调者基于一阶段的报告来判断下一步操作\n"),t("ul",[t("li",[a._v("如果一阶段都成功，则通知所有事务参与者，提交事务")]),a._v(" "),t("li",[a._v("如果一阶段任意一个参与者失败，则通知所有事务参与者回滚事务")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230301105622776.png",alt:"image-20230301105622776"}})]),a._v(" "),t("h3",{attrs:{id:"at模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#at模式"}},[a._v("#")]),a._v(" AT模式")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230301110121318.png",alt:"image-20230301110121318"}})]),a._v(" "),t("h4",{attrs:{id:"at与xa的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#at与xa的区别"}},[a._v("#")]),a._v(" AT与XA的区别")]),a._v(" "),t("blockquote",[t("ul",[t("li",[a._v("XA模式一阶段不提交事务，锁定资源；AT模式一阶段直接提交，不锁定资源。")]),a._v(" "),t("li",[a._v("XA模式依赖数据库机制实现回滚；AT模式利用数据快照实现数据回滚。")]),a._v(" "),t("li",[a._v("XA模式强一致；AT模式最终一致")])])]),a._v(" "),t("h4",{attrs:{id:"at脏写问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#at脏写问题"}},[a._v("#")]),a._v(" AT脏写问题")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230301110520154.png",alt:"image-20230301110520154"}})]),a._v(" "),t("p",[a._v("解决思路就是引入了全局锁的概念。在释放DB锁之前，先拿到全局锁。避免同一时刻有另外一个事务来操作当前数据。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230301110730741.png",alt:"image-20230301110730741"}})]),a._v(" "),t("h3",{attrs:{id:"tcc模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcc模式"}},[a._v("#")]),a._v(" TCC模式")]),a._v(" "),t("blockquote",[t("ul",[t("li",[t("p",[a._v("Try：资源的检测和预留；")])]),a._v(" "),t("li",[t("p",[a._v("Confirm：完成资源操作业务；要求 Try 成功 Confirm 一定要能成功。")])]),a._v(" "),t("li",[t("p",[a._v("Cancel：预留资源释放，可以理解为try的反向操作。")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230301112531169.png",alt:"image-20230301112531169"}})]),a._v(" "),t("p",[t("strong",[a._v("TCC的优点")])]),a._v(" "),t("ul",[t("li",[a._v("一阶段完成直接提交事务，释放数据库资源，性能好")]),a._v(" "),t("li",[a._v("相比AT模型，无需生成快照，无需使用全局锁，性能最强")]),a._v(" "),t("li",[a._v("不依赖数据库事务，而是依赖补偿操作，可以用于非事务型数据库")])]),a._v(" "),t("p",[t("strong",[a._v("TCC的缺点")])]),a._v(" "),t("ul",[t("li",[a._v("有代码侵入，需要人为编写try、Confirm和Cancel接口，太麻烦")]),a._v(" "),t("li",[a._v("软状态，事务是最终一致")]),a._v(" "),t("li",[a._v("需要考虑Confirm和Cancel的失败情况，做好幂等处理")])]),a._v(" "),t("h4",{attrs:{id:"空回滚"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#空回滚"}},[a._v("#")]),a._v(" 空回滚")]),a._v(" "),t("p",[a._v("当某分支事务的try阶段"),t("strong",[a._v("阻塞")]),a._v("时，可能导致全局事务超时而触发二阶段的cancel操作。在未执行try操作时先执行了cancel操作，这时cancel不能做回滚，就是"),t("strong",[a._v("空回滚")]),a._v("。")]),a._v(" "),t("p",[a._v("执行cancel操作时，"),t("strong",[a._v("应当判断try是否已经执行")]),a._v("，如果尚未执行，则应该空回滚。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230301112914922.png",alt:"image-20230301112914922"}})]),a._v(" "),t("h4",{attrs:{id:"业务悬挂"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#业务悬挂"}},[a._v("#")]),a._v(" 业务悬挂")]),a._v(" "),t("p",[a._v("对于已经空回滚的业务，之前被阻塞的try操作恢复，继续执行try，就永远不可能confirm或cancel ，事务一直处于中间状态，这就是"),t("strong",[a._v("业务悬挂")]),a._v("。")]),a._v(" "),t("p",[a._v("执行try操作时，"),t("strong",[a._v("应当判断cancel是否已经执行过了")]),a._v("，如果已经执行，应当阻止空回滚后的try操作，避免悬挂")]),a._v(" "),t("h3",{attrs:{id:"saga模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#saga模式"}},[a._v("#")]),a._v(" SAGA模式")]),a._v(" "),t("p",[a._v("分布式事务内有多个参与者，需要用户根据业务场景实现其"),t("strong",[a._v("正向操作")]),a._v("和逆向回滚操作。")]),a._v(" "),t("p",[a._v("Saga也分为两个阶段：")]),a._v(" "),t("ul",[t("li",[a._v("一阶段：直接提交本地事务")]),a._v(" "),t("li",[a._v("二阶段：成功则什么都不做；失败则通过编写补偿业务来回滚")])])])}),[],!1,null,null,null);t.default=s.exports}}]);