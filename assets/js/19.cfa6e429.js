(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{349:function(v,_,a){"use strict";a.r(_);var t=a(3),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"多级缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#多级缓存"}},[v._v("#")]),v._v(" 多级缓存")]),v._v(" "),_("p",[v._v("传统的缓存策略一般是请求到达Tomcat后，先查询Redis，如果未命中则查询数据库，如图：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230302112822528.png",alt:"image-20230302112822528"}})]),v._v(" "),_("p",[v._v("存在下面的问题：")]),v._v(" "),_("p",[v._v("•请求要经过Tomcat处理，Tomcat的性能成为整个系统的瓶颈")]),v._v(" "),_("p",[v._v("•Redis缓存失效时，会对数据库产生冲击")]),v._v(" "),_("p",[v._v("多级缓存就是充分利用请求处理的每个环节，分别添加缓存，减轻Tomcat压力，提升服务性能：")]),v._v(" "),_("ul",[_("li",[v._v("浏览器访问静态资源时，优先读取浏览器本地缓存")]),v._v(" "),_("li",[v._v("访问非静态资源（ajax查询数据）时，访问服务端")]),v._v(" "),_("li",[v._v("请求到达Nginx后，优先读取Nginx本地缓存")]),v._v(" "),_("li",[v._v("如果Nginx本地缓存未命中，则去直接查询Redis（不经过Tomcat）")]),v._v(" "),_("li",[v._v("如果Redis查询未命中，则查询Tomcat")]),v._v(" "),_("li",[v._v("请求进入Tomcat后，优先查询JVM进程缓存")]),v._v(" "),_("li",[v._v("如果JVM进程缓存未命中，则查询数据库")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230302113339463.png",alt:"image-20230302113339463"}})]),v._v(" "),_("p",[_("strong",[v._v("反正前面一堆缓存，数据库就是个宝宝")])]),v._v(" "),_("h2",{attrs:{id:"jvm进程缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jvm进程缓存"}},[v._v("#")]),v._v(" JVM进程缓存")]),v._v(" "),_("h2",{attrs:{id:"openresty多级缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#openresty多级缓存"}},[v._v("#")]),v._v(" OpenResty多级缓存")]),v._v(" "),_("h2",{attrs:{id:"缓存同步"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存同步"}},[v._v("#")]),v._v(" 缓存同步")]),v._v(" "),_("p",[v._v("大多数情况下，浏览器查询到的都是缓存数据，如果缓存数据与数据库数据存在较大差异，可能会产生比较严重的后果。")]),v._v(" "),_("p",[v._v("所以我们必须保证数据库数据、缓存数据的一致性，这就是缓存与数据库的同步。")]),v._v(" "),_("h3",{attrs:{id:"数据同步策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#数据同步策略"}},[v._v("#")]),v._v(" 数据同步策略")]),v._v(" "),_("p",[v._v("缓存数据同步的常见方式有三种：")]),v._v(" "),_("p",[_("strong",[v._v("设置有效期")]),v._v("：给缓存设置有效期，到期后自动删除。再次查询时更新")]),v._v(" "),_("ul",[_("li",[v._v("优势：简单、方便")]),v._v(" "),_("li",[v._v("缺点：时效性差，缓存过期之前可能不一致")]),v._v(" "),_("li",[v._v("场景：更新频率较低，时效性要求低的业务")])]),v._v(" "),_("p",[_("strong",[v._v("同步双写")]),v._v("：在修改数据库的同时，直接修改缓存")]),v._v(" "),_("ul",[_("li",[v._v("优势：时效性强，缓存与数据库强一致")]),v._v(" "),_("li",[v._v("缺点：有代码侵入，耦合度高；")]),v._v(" "),_("li",[v._v("场景：对一致性、时效性要求较高的缓存数据")])]),v._v(" "),_("p",[v._v("**异步通知：**修改数据库时发送事件通知，相关服务监听到通知后修改缓存数据")]),v._v(" "),_("ul",[_("li",[v._v("优势：低耦合，可以同时通知多个缓存服务")]),v._v(" "),_("li",[v._v("缺点：时效性一般，可能存在中间不一致状态")]),v._v(" "),_("li",[v._v("场景：时效性要求一般，有多个服务需要同步")])]),v._v(" "),_("p",[v._v("而异步实现又可以基于MQ或者Canal来实现：")]),v._v(" "),_("p",[v._v("1）基于MQ的异步通知：")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230302114448985.png",alt:"image-20230302114448985"}})]),v._v(" "),_("p",[v._v("解读：")]),v._v(" "),_("ul",[_("li",[v._v("商品服务完成对数据的修改后，只需要发送一条消息到MQ中。")]),v._v(" "),_("li",[v._v("缓存服务监听MQ消息，然后完成对缓存的更新")])]),v._v(" "),_("p",[v._v("依然有少量的代码侵入。")]),v._v(" "),_("p",[v._v("2）基于Canal的通知")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230302114511658.png",alt:"image-20230302114511658"}})]),v._v(" "),_("p",[v._v("解读：")]),v._v(" "),_("ul",[_("li",[v._v("商品服务完成商品修改后，业务直接结束，没有任何代码侵入")]),v._v(" "),_("li",[v._v("Canal监听MySQL变化，当发现变化后，立即通知缓存服务")]),v._v(" "),_("li",[v._v("缓存服务接收到canal通知，更新缓存")])]),v._v(" "),_("p",[v._v("代码零侵入")])])}),[],!1,null,null,null);_.default=s.exports}}]);