(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{342:function(s,e,_){"use strict";_.r(e);var t=_(3),v=Object(t.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h2",{attrs:{id:"zoopkeeper用来干什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zoopkeeper用来干什么"}},[s._v("#")]),s._v(" ZoopKeeper用来干什么")]),s._v(" "),e("ul",[e("li",[s._v("ZooKeeper主要"),e("strong",[s._v("服务于分布式系统")]),s._v("，可以用ZooKeeper来做：统一配置管理、统一命名服务、分布式锁、集群管理。")]),s._v(" "),e("li",[s._v("使用分布式系统就无法避免对节点管理的问题(需要实时感知节点的状态、对节点进行统一管理等等)，而由于这些问题处理起来可能相对麻烦和提高了系统的复杂性，ZooKeeper作为一个能够"),e("strong",[s._v("通用")]),s._v("解决这些问题的中间件就应运而生了。")])]),s._v(" "),e("h2",{attrs:{id:"zoopkeeper是什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#zoopkeeper是什么"}},[s._v("#")]),s._v(" ZoopKeeper是什么")]),s._v(" "),e("ul",[e("li",[s._v("ZooKeeper的数据结构，跟Unix文件系统非常类似，可以看做是一颗"),e("strong",[s._v("树")]),s._v("，每个节点叫做"),e("strong",[s._v("ZNode")]),s._v("。每一个节点可以通过"),e("strong",[s._v("路径")]),s._v("来标识，结构图如下：")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/20230227085715.png",alt:""}})]),s._v(" "),e("p",[e("strong",[s._v("Znode中有两种类型的节点")])]),s._v(" "),e("ul",[e("li",[e("strong",[s._v("短暂/临时(Ephemeral)")]),s._v("：当客户端和服务端断开连接后，所创建的Znode(节点)"),e("strong",[s._v("会自动删除")])]),s._v(" "),e("li",[e("strong",[s._v("持久(Persistent)")]),s._v("：当客户端和服务端断开连接后，所创建的Znode(节点)"),e("strong",[s._v("不会删除")])])]),s._v(" "),e("h2",{attrs:{id:"监听器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监听器"}},[s._v("#")]),s._v(" 监听器")]),s._v(" "),e("ul",[e("li",[s._v("监听Znode节点的"),e("strong",[s._v("数据变化")])]),s._v(" "),e("li",[s._v("监听子节点的"),e("strong",[s._v("增减变化")])])]),s._v(" "),e("h2",{attrs:{id:"统一配置管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统一配置管理"}},[s._v("#")]),s._v(" 统一配置管理")]),s._v(" "),e("p",[s._v("将配置文件common.yml放在ZooKeeper的Znode节点中，然后系统监听这个节点有无变更，及时响应。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230227092039018.png",alt:"image-20230227092039018"}})]),s._v(" "),e("h2",{attrs:{id:"统一命名服务"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统一命名服务"}},[s._v("#")]),s._v(" 统一命名服务")]),s._v(" "),e("ul",[e("li",[s._v("统一命名服务的理解其实跟"),e("strong",[s._v("域名")]),s._v("一样，是我们为这某一部分的资源给它"),e("strong",[s._v("取一个名字")]),s._v("，别人通过这个名字就可以拿到对应的资源")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230227092304034.png",alt:"image-20230227092304034"}})]),s._v(" "),e("h2",{attrs:{id:"分布式锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[s._v("#")]),s._v(" 分布式锁")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230227092951529.png",alt:"image-20230227092951529"}})]),s._v(" "),e("p",[s._v("访问的时候会创建"),e("strong",[s._v("带顺序号的临时/短暂")]),s._v("("),e("code",[s._v("EPHEMERAL_SEQUENTIAL")]),s._v(")节点，比如，系统A创建了"),e("code",[s._v("id_000000")]),s._v("节点，系统B创建了"),e("code",[s._v("id_000002")]),s._v("节点，系统C创建了"),e("code",[s._v("id_000001")]),s._v("节点。")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230227093024918.png",alt:"image-20230227093024918"}})]),s._v(" "),e("p",[s._v("接着，拿到"),e("code",[s._v("/locks")]),s._v("节点下的"),e("strong",[s._v("所有子节点")]),s._v("(id_000000,id_000001,id_000002)，"),e("strong",[s._v("判断自己创建的是不是最小的那个节点")])]),s._v(" "),e("ul",[e("li",[e("p",[s._v("如果是，则拿到锁。")])]),s._v(" "),e("li",[e("ul",[e("li",[s._v("释放锁：执行完操作后，把创建的节点给删掉")])])]),s._v(" "),e("li",[e("p",[s._v("如果不是，则监听比自己要小1的节点变化")])])]),s._v(" "),e("h2",{attrs:{id:"集群状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#集群状态"}},[s._v("#")]),s._v(" 集群状态")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://lzh-images.oss-cn-hangzhou.aliyuncs.com/images/image-20230227093444272.png",alt:"image-20230227093444272"}})]),s._v(" "),e("p",[s._v("只要系统A挂了，那"),e("code",[s._v("/groupMember/A")]),s._v("这个节点就会删除，通过"),e("strong",[s._v("监听")]),e("code",[s._v("groupMember")]),s._v("下的子节点，系统B和C就能够感知到系统A已经挂了。(新增也是同理)")]),s._v(" "),e("p",[s._v("除了能够感知节点的上下线变化，ZooKeeper还可以实现"),e("strong",[s._v("动态选举Master")]),s._v("的功能。(如果集群是主从架构模式下)")]),s._v(" "),e("p",[s._v("原理也很简单，如果想要实现动态选举Master的功能，Znode节点的类型是带"),e("strong",[s._v("顺序号的临时节点")]),s._v("("),e("code",[s._v("EPHEMERAL_SEQUENTIAL")]),s._v(")就好了。")]),s._v(" "),e("ul",[e("li",[s._v("Zookeeper会每次选举最小编号的作为Master，如果Master挂了，自然对应的Znode节点就会删除。然后让"),e("strong",[s._v("新的最小编号作为Master")]),s._v("，这样就可以实现动态选举的功能了。")])])])}),[],!1,null,null,null);e.default=v.exports}}]);